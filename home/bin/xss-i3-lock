#!/bin/bash
# Properly handle locking when going to sleep; borrowed mostly from xss-lock's
# provided script

## CONFIGURATION ##############################################################

# Place to save blurry image
image=$(mktemp --suffix=.png)

# Options to pass to i3lock
i3lock_options="-i $image -p default -e"

# Place to save former current workspace
old_ws=""

# Run before starting the locker
pre_lock() {
    # Allow DPMS
    xset dpms 5 5 5

    # Save the current workspace
    old_ws=$(/home/cpence/bin/i3-current-ws)

    # Switch to an empty workspace (yay wallpaper)
    /home/cpence/bin/i3-find-open

    # Get and blur screenshot
    scrot "$image"
    convert "$image" -level "0%,100%,0.6" -filter Gaussian -resize 20% -define "filter:sigma=1.5" -resize 500.5% "$image"
    #convert "$image" -level "0%,100%,0.6" -scale 10% -scale 1000% "$image"

    return
}

# Run after the locker exits
post_lock() {
    # Change back to the old current WS
    i3-msg workspace number $old_ws

    # Disable DPMS
    xset dpms 0 0 0

    # Clean up
    rm $image

    return
}

###############################################################################

pre_lock

# We set a trap to kill the locker if we get killed, then start the locker and
# wait for it to exit. The waiting is not that straightforward when the locker
# forks, so we use this polling only if we have a sleep lock to deal with.
if [[ -e /dev/fd/${XSS_SLEEP_LOCK_FD:--1} ]]; then
    kill_i3lock() {
        pkill -xu $EUID "$@" i3lock
    }

    trap kill_i3lock TERM INT

    # we have to make sure the locker does not inherit a copy of the lock fd
    i3lock $i3lock_options {XSS_SLEEP_LOCK_FD}<&-

    # now close our fd (only remaining copy) to indicate we're ready to sleep
    exec {XSS_SLEEP_LOCK_FD}<&-

    while kill_i3lock -0; do
        sleep 0.5
    done
else
    trap 'kill %%' TERM INT
    i3lock -n $i3lock_options &
    wait
fi

post_lock
